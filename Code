#include <vexMotor.h> // includes the vexMotor library (must also include Servo.h)
#include <Servo.h>    // servo library -- vexMotor relies on the Servo library
#include <Adafruit_MotorShield.h>

//optimal distance to wall 10>x>5

int fanPin = 3;

vexMotor myVexMotor1;  // creates an instance of the vexMotor class
vexMotor myVexMotor2;
vexMotor myVexMotor3;  
vexMotor myVexMotor4;

Adafruit_MotorShield AFMS = Adafruit_MotorShield(); 
// Or, create it with a different I2C address (say for stacking)
// Adafruit_MotorShield AFMS = Adafruit_MotorShield(0x61); 

// Select which 'port' M1, M2, M3 or M4. In this case, M1
Adafruit_DCMotor *myMotor1 = AFMS.getMotor(1);
Adafruit_DCMotor *myMotor2 = AFMS.getMotor(2);
Adafruit_DCMotor *myMotor3 = AFMS.getMotor(3);
Adafruit_DCMotor *myMotor4 = AFMS.getMotor(4);

void setup(){
  Serial.begin(9600);    // starts the Serial communication on Arduino
  

  myVexMotor1.attach(9); // setup / attach the vexMotor onto pin 9
  myVexMotor2.attach(10);
  myVexMotor3.attach(11); 
  myVexMotor4.attach(8);
  AFMS.begin();

  myMotor1->setSpeed(200); //move to methods  
  myMotor1->run(FORWARD);
  myMotor2->setSpeed(200);
  myMotor2->run(FORWARD);
  myMotor3->setSpeed(200);
  myMotor3->run(FORWARD);
  myMotor4->setSpeed(200);
  myMotor4->run(FORWARD);
}

void loop(){
  int up = distUp();
  int down = distDown();
  int forward = distForward();
  int backward = distBackward();
  if(down > 20)
    driveDown();
  else
    stopMotors();
}

void checkRoutes(int down, int up, int forward, int backward){
  if(up > 10){
    Serial.print("");
    //add Up to Array
  }
  if(down > 10){
    Serial.print("");
    //add Down to Array
  }
  if(forward > 10){
    Serial.print("");
    //add Forward to Array
  }
  if(backward > 10){
    Serial.print("");
    //add Backward to Array
  }
  //return array
}

int distUp(){
  pinMode(A0, OUTPUT);
  pinMode(A1, INPUT);
  return(dist(A0, A1));
}

int distDown(){
  pinMode(6, OUTPUT);
  pinMode(7, INPUT);
  return(dist(6, 7));
}

int distForward(){
  pinMode(4, OUTPUT);
  pinMode(5, INPUT);
  return(dist(4,5));
  
}

int distBackward(){
  pinMode(A2, OUTPUT);
  pinMode(A3, INPUT);
  return(dist(A2, A3));
}

int dist(int trig, int echo){
  long duration, distance;
  digitalWrite(trig, LOW);
  delayMicroseconds(2); // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig, LOW); // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echo, HIGH);
  distance = duration/58; // Calculating the distance
  return(distance);
}

void fanOn(){
  pinMode(fanPin, OUTPUT);
  digitalWrite(fanPin, HIGH);
}

void fanOff(){
  digitalWrite(fanPin, LOW);
}

void stopMotors(){
   myVexMotor2.write(0);
   myVexMotor4.write(0);
   myVexMotor1.write(0);
   myVexMotor3.write(0);
 }
 
 void driveForward(){
   myVexMotor1.write(200);
   myVexMotor3.write(-200);
   myVexMotor2.write(0);
   myVexMotor4.write(0);
 }
 
 void driveBackward(){
   myVexMotor1.write(-200);
   myVexMotor3.write(200);
   myVexMotor2.write(0);
   myVexMotor4.write(0);
 }
 
 void driveUp(){
  Serial.println("Up");
   myVexMotor2.write(175);
   myVexMotor4.write(-200);
   myVexMotor1.write(0);
   myVexMotor3.write(0);
 }
 
 void driveDown(){
   myVexMotor2.write(-17/0);
   myVexMotor4.write(150);
   myVexMotor1.write(0);
  myVexMotor3.write(0);
 }
